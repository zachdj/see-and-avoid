//#include "opencv2/opencv.hpp"
#define _ITERATOR_DEBUG_LEVEL 0

#include<opencv2\highgui\highgui.hpp>
#include<iostream>
#include <opencv2\opencv.hpp>
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/video/background_segm.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>

#include <opencv2\highgui\highgui.hpp>
#include <iostream>
#include <opencv2/features2d.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2\opencv.hpp>
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/video/background_segm.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "opencv2/opencv.hpp"
#include "opencv2/imgproc.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2\video\background_segm.hpp>
#include <opencv2\video\video.hpp>
#include <opencv2\video\tracking.hpp>


using namespace std;
using namespace cv;

Mat fgMaskMOG; //fg mask generated by MOG method
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor>  pMOG;
Ptr<BackgroundSubtractor>  pMOG2; 

void MyLine(Mat img, Point start, Point end)
{
int thickness = 3;
int lineType = 8;
line(img,
start,
end,
CV_RGB(250,250,250),
thickness,
lineType);
}


int main(void)
{
	Mat frame;
	Mat edges;
	VideoCapture cap("PlaneSim.mp4");   //open the capture for video file
	int totalframe = cap.get(CV_CAP_PROP_FRAME_COUNT); // get total number of frames in video
	namedWindow("Canvas", CV_WINDOW_AUTOSIZE);
	cv::moveWindow("Canvas", 10, 20);
	//pMOG = new BackgroundSubtractorMOG(100,3,0.5); //MOG approach
	//pMOG2 = new BackgroundSubtractorMOG2(0, 18, false); //MOG2 approach

														// Setup SimpleBlobDetector parameters.
	SimpleBlobDetector::Params params;

	// Change thresholds
	params.minThreshold = 200;
	params.maxThreshold = 240;

	
	//Filter by Color
	params.filterByColor = true;
	params.blobColor = 0; 

	// Filter by Area.
	params.filterByArea = true;
	params.minArea = 50;

	// Filter by Circularity
	params.filterByCircularity = false;
	params.minCircularity = 0.1;

	// Filter by Convexity
	params.filterByConvexity = false;
	params.minConvexity = 0.87;

	// Filter by Inertia
	params.filterByInertia = false;
	params.minInertiaRatio = 0.01;


	// Storage for blobs
	vector<KeyPoint> keypoints;





	while (waitKey(30) != 27 && totalframe>0)
		//wait 30 milliseconds and check for esc key
	{
		cap >> frame; //save captured image to frame variable
		//cvtColor(frame, edges, CV_BGR2GRAY);
		//GaussianBlur(edges, edges, Size(1, 1), 0.5, 0.5, BORDER_REFLECT);
		//blur(edges, edges, Size(7, 7));
		//Canny(edges, edges, 180, 180, 3);
		//cv::Size s = edges.size();
		//int rows = s.height; cout << rows << endl;
		//int cols = s.width; cout << "    " << cols << endl;
		//cout << Point(rows / 2 + 40, cols / 2 + 40) << endl;
		//MyLine(edges, Point(cols/2 + 30, rows/2), Point(cols/2 - 30, rows/2 ));
		//MyLine(edges, Point(cols / 2, rows / 2 + 30), Point(cols / 2, rows / 2 - 30));
		imshow("Canvas", frame); //show image on window named Camera
		
		//THESE ARE FOR OUR BACKGROUND SUBTRACTION
		//pMOG->operator()(frame, fgMaskMOG);
		//pMOG2->operator()(frame, fgMaskMOG2);
		//imshow("FG Mask MOG", fgMaskMOG);
		//imshow("FG Mask MOG 2", fgMaskMOG2);
		Canny(frame, edges, 170, 180);
		//imshow("edges", edges);
	
#if CV_MAJOR_VERSION < 3   // If you are using OpenCV 2

		// Set up detector with params
		SimpleBlobDetector detector(params);

		// Detect blobs
		detector.detect(edges, keypoints);
#else 

		// Set up detector with params
		Ptr<SimpleBlobDetector> detector = SimpleBlobDetector::create(params);

		// Detect blobs
		detector->detect(im, keypoints);
#endif 

		// Draw detected blobs as red circles.
		// DrawMatchesFlags::DRAW_RICH_KEYPOINTS flag ensures
		// the size of the circle corresponds to the size of blob

		Mat im_with_keypoints;
		drawKeypoints(edges, keypoints, im_with_keypoints, Scalar(0, 0, 255), DrawMatchesFlags::DRAW_RICH_KEYPOINTS);

		// Show blobs
		imshow("blobs", im_with_keypoints);

		for (std::vector<cv::KeyPoint>::iterator blobIterator = keypoints.begin(); blobIterator != keypoints.end(); blobIterator++) {
			std::cout << "size of blob is: " << blobIterator->size << std::endl;
			std::cout << "point is at: " << blobIterator->pt.x << " " << blobIterator->pt.y << std::endl;
		}






		totalframe--;
	}
}





/*
#include <opencv2\opencv.hpp>

using namespace cv;

int main(int, char**)
{
	VideoCapture cap(0); // open the default camera
	if (!cap.isOpened())  // check if we succeeded
		return -1;

	Mat edges;
	namedWindow("edges", 1);
	for (;;)
	{
		Mat frame;
		cap >> frame; // get a new frame from camera
		cvtColor(frame, edges, CV_BGR2GRAY);
		GaussianBlur(edges, edges, Size(7, 7), 1.5, 1.5);
		Canny(edges, edges, 0, 30, 3);
		imshow("edges", edges);
		if (waitKey(30) >= 0) break;
	}
	// the camera will be deinitialized automatically in VideoCapture destructor
	return 0;
}

*/